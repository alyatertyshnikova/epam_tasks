package test.java;

import org.junit.Before;
import org.junit.Test;

import main.java.Pen;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.*;

public class PenTest {
    private Pen p;

    @Before
    public void setUp() {
        p = new Pen("blue", "pilot");
    }

    @Test
    public void toStringShouldReturnColorBrandAndPossibilityToWrite() {
        assertEquals("blue pilot can write", p.toString());
    }

    @Test
    public void equalsShouldReturnFalseForComparingWithNull() {
        Pen nullPen = null;
        assertFalse(p.equals(nullPen));
    }

    @Test
    public void equalsShouldReturnTrueForComparingWithTheSameObject() {
        Pen theSamePen = new Pen("blue", "pilot");
        assertTrue(p.equals(p));
        assertTrue(p.equals(theSamePen));
        assertTrue(theSamePen.equals(p));
    }

    @Test
    public void equalsShouldReturnFalseForDifferentObjects(){
        Pen absDifferentPen=new Pen("red", "parker");
        absDifferentPen.canItWrite=false;
        assertFalse(p.equals(absDifferentPen));
    }

    @Test
    public void equalsShouldReturnFalseForOtherInstances(){
        String str="Some String";
        assertFalse(p.equals(str));
    }

    @Test
    public void hashCodeShouldReturnTheSameHashForTheSameObjects() {
        Pen theSamePen = new Pen("blue", "pilot");
        int hash = theSamePen.hashCode();
        assertEquals(hash, p.hashCode());
    }

    @Test
    public void hashCodeShouldReturnDifferValueForModifiedObject() {
        int hash = p.hashCode();
        p.canItWrite = false;
        assertThat(p.hashCode(), is(not(hash)));
    }

}
